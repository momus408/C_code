#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

//%d - 打印整形
//%c - 打印字符
//%s - 打印字符串
//%f - 打印float类型的数据
//%lf - 打印double类型的数据

//转义字符
	// \n 换行  
	// \0 字符串的结束标志 
	// \? 防止多个问号同时使用， 防止被解析成三字母词 ??) --> ]      ??( --> [
	// \" 用于表示一个字符串内部的双引号
	// \' 用于表示字符常量 
	// \\ 用于表示一个反斜杠
	// \a 警告字符
	// \b 退格符
	// \f 进纸符
	// \n 换行
	// \r 回车
	// \t 水平制表符
	// \v 垂直制表符
	// \ddd ddd表示1-3个八进制数字 比如\130 --> X
	// \xdd dd表示2个十六进制数字，比如\x30 --> 0
	
//注释	快捷键Ctrl K + Ctrl C 取消 Ctrl K + Ctrl U
	//1.注释可以梳理思路
	//2.对复杂的代码进行解释 
	//3.写代码的时候写注释既可以帮助自己又可以帮助别人
	
////选择语句
//	//if else
//	//switch 
//
////int main()
////{
////	int input = 0;
////	printf("加入比特\n");
////	printf("要好好学习吗(1/0)？");
////	scanf("%d", &input);
////
////	if (input == 1)
////	{
////		printf("好offer\n");
////	}
////	else
////	{
////		printf("回家卖红薯\n");
////	}
////	return 0;
////}

//循环语句 while if else 
//两万行有效代码的积累
//int main()
//{
//	int line = 0;
//	printf("加入比特\n");
//	while (line<20000)
//	{
//		printf("写代码:%d\n",line);
//		line++;
//	}
//	if (line == 20000)
//	{
//		printf("好offer\n");
//	}
//	else 
//	{
//		printf("继续加油\n");
//	}
//
//	return 0;
//} 

//定义函数：求两个任意整数和
//int add(int x,int y)	//定义函数add(x,y)为x+y
//{
//	int z = 0;
//	z = x + y;
//	return z;
//}
//
//int main()
//{
//	int n1;
//	int n2;
//	scanf("%d %d", &n1, &n2);	//输入
//	int sum = add(n1, n2);	//求和
//	printf("%d\n", sum);
//	return 0;
//}

//数组 
//int main()
//{
//	int arr[10] = { 0,1,2,3,4,5,6,7,8,9 };	//定义一个整形数组，数组的方括号表示最多放多少个元素
//	int arr1[] = { 0 };	//数组初始化时有几个元素，数组就有几个元素
//	char ch[];
//	double db();
//	//0~9
//	//printf("%d\n", arr[0]);	//数组的方括号表示下标，0表示第一个数，9表示第十个数
//	int i = 0;
//	while (i < 10)
//	{
//		printf("%d ", arr[i]);
//		i = i + 1;
//	}
//	return 0;
//}



//操作符
// 算术操作符 + - * /   % --> 取模 7 % 2 = 1
//int main()
//{
//	float a = 7/2;
//	float b = 7 / 2.0;
//	printf("%.2f\n", a);
//	printf("%.2f\n", b);	//除号的两段都是整数的时候，执行的是整数除法，只要两段有一个浮点数就执行浮点数的除法
//	return 0;
//}
//赋值操作符 =赋值 += -= *= /= 
//int main()
//{
//	int a = 0;	//初始化
//	a = 20;	//赋值
//	a = a + 3;	//a=23
//	a += 3;	
//	a -= 3;
//	a = a - 3;
//	return 0;
//}
//单目操作符 -- 只有同一个操作数的操作符  
// 如! 逻辑反操作;		- 负值;	+正值；	&取地址;	sizeof 操作数的类型长度;	~对一个数的二进制按位取反	
// -- ++ 前置后置  
// a + b  双目操作符左右有两个操作数
// C语言中0表示假，非0表示真
//
//int main()
//{
//	int flag = 0;
//	if (!flag)	//   ! -- 把假的变成真
//	{
//		printf("hehe\n");
//	}
//	int arr[10] = { 0 };
//	printf("%d\n", sizeof(arr));// 40 计算的是整个数组的大小，单位是字节
//	printf("%d\n", sizeof(arr[0]));//4 计算的是数组第一个元素的大小
//	printf("%d\n", sizeof(arr) / sizeof(arr[0]));//10 计算的是数组的元素个数
//	int a = 10;
//	int b = a++;//后置++ 先使用，后++		前置++ 先++后使用
//	//int b = a;  a = a + 1;
//	printf("%d\n", b);//10
//	printf("%d\n", a);//11
//	return 0;
//}
//逻辑操作符   && 逻辑与 - 并且	|| 逻辑或 - 或者

//变量的命名
//1.有意义 
//2.名字必须是字母、数字、下划线组成，不能有特殊字符，不能以数字开头
//3.变量名不能是关键字
